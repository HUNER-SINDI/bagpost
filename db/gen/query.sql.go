// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteWarehouse = `-- name: DeleteWarehouse :exec
DELETE FROM warehouses
WHERE id = $1
`

func (q *Queries) DeleteWarehouse(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteWarehouse, id)
	return err
}

const getAdminByEmailAndPassword = `-- name: GetAdminByEmailAndPassword :one
SELECT id, email, password, created_at, updated_at FROM admins
WHERE email = $1 AND password = $2
LIMIT 1
`

type GetAdminByEmailAndPasswordParams struct {
	Email    string
	Password string
}

func (q *Queries) GetAdminByEmailAndPassword(ctx context.Context, arg GetAdminByEmailAndPasswordParams) (Admin, error) {
	row := q.db.QueryRow(ctx, getAdminByEmailAndPassword, arg.Email, arg.Password)
	var i Admin
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertWarehouseSetter = `-- name: InsertWarehouseSetter :one
INSERT INTO warehousesetter (krd, ar, warehouse_id)
VALUES ($1, $2, $3)
RETURNING id
`

type InsertWarehouseSetterParams struct {
	Krd         string
	Ar          string
	WarehouseID int32
}

func (q *Queries) InsertWarehouseSetter(ctx context.Context, arg InsertWarehouseSetterParams) (int32, error) {
	row := q.db.QueryRow(ctx, insertWarehouseSetter, arg.Krd, arg.Ar, arg.WarehouseID)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const insertWharehouses = `-- name: InsertWharehouses :one
INSERT INTO warehouses (fullname, locname, email, password, phone, is_active)
VALUES ($1,$2,$3,$4,$5,$6 ) RETURNING id
`

type InsertWharehousesParams struct {
	Fullname string
	Locname  string
	Email    string
	Password string
	Phone    string
	IsActive pgtype.Bool
}

func (q *Queries) InsertWharehouses(ctx context.Context, arg InsertWharehousesParams) (int32, error) {
	row := q.db.QueryRow(ctx, insertWharehouses,
		arg.Fullname,
		arg.Locname,
		arg.Email,
		arg.Password,
		arg.Phone,
		arg.IsActive,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const listWarehouses = `-- name: ListWarehouses :many
SELECT 
    w.id AS warehouse_id,
    w.fullname,
    w.locname,
    w.email,
    w.phone,
    w.is_active,
    w.created_at,
    w.updated_at,
    ws.id AS setter_id,
    ws.krd,
    ws.ar
FROM warehouses w
LEFT JOIN warehousesetter ws ON w.id = ws.warehouse_id
ORDER BY w.id ASC
`

type ListWarehousesRow struct {
	WarehouseID int32
	Fullname    string
	Locname     string
	Email       string
	Phone       string
	IsActive    pgtype.Bool
	CreatedAt   pgtype.Timestamp
	UpdatedAt   pgtype.Timestamp
	SetterID    pgtype.Int4
	Krd         pgtype.Text
	Ar          pgtype.Text
}

func (q *Queries) ListWarehouses(ctx context.Context) ([]ListWarehousesRow, error) {
	rows, err := q.db.Query(ctx, listWarehouses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListWarehousesRow
	for rows.Next() {
		var i ListWarehousesRow
		if err := rows.Scan(
			&i.WarehouseID,
			&i.Fullname,
			&i.Locname,
			&i.Email,
			&i.Phone,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.SetterID,
			&i.Krd,
			&i.Ar,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWarehouseInfo = `-- name: UpdateWarehouseInfo :exec
UPDATE warehouses
SET
  fullname = $1,
  locname = $2,
  email = $3,
  phone = $4,
  is_active = $5,
  updated_at = NOW()
WHERE id = $6
`

type UpdateWarehouseInfoParams struct {
	Fullname string
	Locname  string
	Email    string
	Phone    string
	IsActive pgtype.Bool
	ID       int32
}

func (q *Queries) UpdateWarehouseInfo(ctx context.Context, arg UpdateWarehouseInfoParams) error {
	_, err := q.db.Exec(ctx, updateWarehouseInfo,
		arg.Fullname,
		arg.Locname,
		arg.Email,
		arg.Phone,
		arg.IsActive,
		arg.ID,
	)
	return err
}

const updateWarehouseSetter = `-- name: UpdateWarehouseSetter :exec
UPDATE warehousesetter
SET
  krd = $1,
  ar = $2
WHERE warehouse_id = $3
`

type UpdateWarehouseSetterParams struct {
	Krd         string
	Ar          string
	WarehouseID int32
}

func (q *Queries) UpdateWarehouseSetter(ctx context.Context, arg UpdateWarehouseSetterParams) error {
	_, err := q.db.Exec(ctx, updateWarehouseSetter, arg.Krd, arg.Ar, arg.WarehouseID)
	return err
}
